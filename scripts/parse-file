#!/usr/bin/env python3

import re
import sys
from typing import Iterable
from enum import Enum

directive_pat = re.compile("{(.+?)}")
text_open_pat = re.compile("{(\**)")


class State(Enum):
    DEFAULT = 0
    INCLUDE_WITH = 1
    TEXT = 2


def strip_list(lines: Iterable[str]):
    return "".join(lines).strip().splitlines(keepends=True)


def parse(file: Iterable[str], subs: dict[str, list[str]] = {}):
    state = State.DEFAULT
    include_subs: dict[str, list[str]] = {}

    for line in file:
        # Breaking this while implies that we've consumed the whole line
        while line:
            match state:
                case State.INCLUDE_WITH:
                    if (match := directive_pat.search(line)) and match.group(1) == "endwith":
                        with open(f"templates/{filename}") as include_file:
                            yield from parse(include_file, include_subs)
                        include_subs.clear()
                        line = line[match.end():]
                        state = State.DEFAULT
                    else:
                        if len(segments := line.split(":", 1)) > 1:
                            key = segments[0]
                            line = line[len(key) + 1:]
                            key = key.strip()
                            if match := text_open_pat.search(line):
                                text_close_pat = match.group(1) + "}"
                                include_subs[key] = []
                                line = line[match.end():]
                                state = State.TEXT
                                continue
                            else:
                                include_subs[key] = strip_list(
                                    parse([line.strip()], subs))
                        break
                case State.TEXT:
                    if len(segments := line.split(text_close_pat, 1)) > 1:
                        include_subs[key].append(segments[0].strip())
                        include_subs[key] = strip_list(
                            parse(include_subs[key], subs))
                        line = segments[1]
                        state = State.INCLUDE_WITH
                    else:
                        include_subs[key].append(line.strip() + "\n")
                        break
                case State.DEFAULT:
                    if match := directive_pat.search(line):
                        yield line[:match.start()]
                        match match.group(1).split():
                            case ["include", filename]:
                                with open(f"templates/{filename}") as include_file:
                                    yield from parse(include_file)
                            case ["include", filename, "with"]:
                                state = State.INCLUDE_WITH
                            case [key] if key in subs:
                                yield from subs[key]
                            case _:
                                yield match.group(0)
                        line = line[match.end():]
                    else:
                        yield line
                        break


with open(sys.argv[1]) as file:
    for line in parse(file):
        print(line, end="")
