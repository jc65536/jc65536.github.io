#!/usr/bin/env python3

import os
import re
import sys
import subprocess

from datetime import date
from typing import Iterator
from io import StringIO, TextIOBase
from smart_quotes import smart_quotify

# Do not configure these. Configure the exports in generate-html instead.

TEMPLATE_DIR = os.environ["TEMPLATE_DIR"]

SRC_FILENAME = sys.argv[1]

DIRECTIVE_PAT = re.compile(r"\$?{([^}]+)}")
OPEN_PAT = re.compile(r"{(\**)")


def prepend_iter(rem: str, src: Iterator[str]):
    if rem:
        yield rem
    for line in src:
        yield line


def parse_with(src: Iterator[str],
               include_subs: dict[str, str],
               subs: dict[str, str],
               rem: str):

    for line in prepend_iter(rem, src):
        while line:
            exit_idx = line.find("{endwith}")
            exit_found = exit_idx != -1

            colon_idx = line.find(":")
            colon_found = colon_idx != -1

            if not exit_found and not colon_found:
                break

            if exit_found and not (colon_found and colon_idx < exit_idx):
                return line[exit_idx + len("{endwith}"):]

            key = line[:colon_idx].strip()
            after_colon = line[colon_idx + 1:].lstrip()
            match = OPEN_PAT.match(after_colon)
            str_buf = StringIO()

            if match:
                line = parse_file(src, str_buf, subs, match[1] + "}",
                                  after_colon[match.end():])
            else:
                parse_file(iter([after_colon]), str_buf, subs)
                line = ""   # Force break

            include_subs[key] = str_buf.getvalue().strip()


def parse_file(src: Iterator[str],
               dest: TextIOBase,
               subs: dict[str, str] = {},
               exit_pat: str = None,
               rem: str = None):

    exit_found = False

    for line in prepend_iter(rem, src):
        # Breaking this while implies that we've consumed the whole line
        while line:
            if exit_pat:
                exit_idx = line.find(exit_pat)
                exit_found = exit_idx != -1

            match = DIRECTIVE_PAT.search(line)

            if not exit_found and not match:
                dest.write(line)
                break

            # If there's no directive before exit
            if exit_found and not (match and match.start() < exit_idx):
                dest.write(line[:exit_idx])
                dest.flush()
                return line[exit_idx + len(exit_pat):]

            if match.start() > 0:
                dest.write(line[:match.start()])

            line = line[match.end():]

            match match[1].split():
                case ["include", filename]:
                    with open(f"{TEMPLATE_DIR}/{filename}") as file:
                        parse_file(file, dest)

                case ["include", filename, "with"]:
                    include_subs: dict[str, str] = {}
                    line = parse_with(src, include_subs, subs, line)

                    with open(f"{TEMPLATE_DIR}/{filename}") as file:
                        parse_file(file, dest, include_subs)

                case ["q"]:
                    str_buf = StringIO()

                    if match[0][0] == "$":
                        parse_file(iter([line]), str_buf, subs)
                        line = ""   # Force break
                    else:
                        line = parse_file(src, str_buf, subs, "{endq}", line)

                    smart_quotify(str_buf.getvalue(), dest)

                case ["with"]:
                    line = parse_with(src, subs, subs, line)

                case ["lastmod"]:
                    dest.write(subprocess.run(("git", "log", "-1",
                                               "--format=%cs", SRC_FILENAME),
                                              capture_output=True,
                                              text=True).stdout.rstrip())

                case ["fdate", *rest]:
                    delim = rest[0][0]
                    format = match[1].split(maxsplit=1)[1].split(delim)[1]
                    str_buf = StringIO()
                    line = parse_file(src, str_buf, subs, "{endfdate}", line)
                    dest.write(date.fromisoformat(str_buf.getvalue().strip())
                                   .strftime(format))

                case ["pre", tag, *rest]:
                    str_buf = StringIO()
                    line = parse_file(src, str_buf, subs, "{endpre}", line)
                    inner = str_buf.getvalue().strip()

                    if not (rest and rest[0] == "noencode"):
                        inner = (inner.replace("&", "&amp;")
                                      .replace("<", "&lt;")
                                      .replace(">", "&gt;"))

                    dest.write(f"<pre><{tag}>{inner}</{tag}></pre>")

                case [key] if key in subs or key[-1] == "?":
                    if key in subs:
                        dest.write(subs[key])

                case _:
                    dest.write(match[0])

    dest.flush()


with open(SRC_FILENAME) as file:
    parse_file(file, sys.stdout)
