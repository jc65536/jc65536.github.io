#!/usr/bin/env python3

import os, re, sys

include_pattern = re.compile("{include (\S+)}")
include_with_pattern = re.compile("{include (\S+) with}")
sub_pattern = re.compile("{(\**)([^=]+)=")
state = 0
subs = {}

def print_file(path: str, func = lambda x: x):
    with open(path) as file:
        for line in map(func, file):
            sys.stdout.write(line)

def sub_all(line: str):
    for key, value in subs.items():
        line = line.replace(f"{{{key}}}", value.strip())
    return line

for line in sys.stdin:
    orig_line = line
    if match := include_pattern.search(line):
        print_file(f"components/{match.group(1)}")
        continue
    if state == 0 and (match := include_with_pattern.search(line)):
        component = match.group(1)
        state = 1
    if state == 1 and "{endwith}" in line:
        print_file(f"components/{component}", sub_all)
        subs.clear()
        state = 0
        continue
    if state == 1 and (match := sub_pattern.search(line)):
        close_tag = match.group(1) + "}"
        key = match.group(2)
        subs[key] = ""
        line = line[match.end():]
        state = 2
    if state == 2:
        if (close_index := line.find(close_tag)) != -1:
            line = line[:close_index]
            state = 1
        subs[key] += line.strip() + "\n"
    if state == 0:
        sys.stdout.write(orig_line)
