#!/usr/bin/env python3

import re
import sys
from typing import Iterable
from enum import Enum


class State(Enum):
    DEFAULT = 0
    INCLUDE_WITH = 1
    TEXT = 2


directive_pat = re.compile("{(.+?)}")
text_open_pat = re.compile("{(\**)")


def parse(file: Iterable[str]):
    state = State.DEFAULT
    subs: dict[str, list[str] | str] = {}

    def sub_all(file: Iterable[str]):
        for line in file:
            for key, value in subs.items():
                line = line.replace(f"{{{key}}}", value)
            yield from line.splitlines(keepends=True)

    for line in file:
        while line:
            match state:
                case State.INCLUDE_WITH:
                    if (match := directive_pat.search(line)) and match.group(1) == "endwith":
                        with open(f"templates/{filename}") as include_file:
                            yield from parse(sub_all(include_file))
                        subs.clear()
                        line = line[match.end():]
                        state = State.DEFAULT
                    else:
                        segments = line.split(":", 1)
                        if len(segments) > 1:
                            key = segments[0]
                            line = line[len(key) + 1:]
                            key = key.strip()
                            if match := text_open_pat.search(line):
                                text_close_pat = match.group(1) + "}"
                                subs[key] = []
                                line = line[match.end():]
                                state = State.TEXT
                            else:
                                subs[key] = "".join(parse([line.strip()])).strip()
                        break
                case State.TEXT:
                    if (close_index := line.find(text_close_pat)) != -1:
                        subs[key].append(line[:close_index].strip())
                        subs[key] = "".join(parse((subs[key]))).strip()
                        line = line[close_index + len(text_close_pat):]
                        state = State.INCLUDE_WITH
                    else:
                        subs[key].append(line.strip() + "\n")
                        break
                case State.DEFAULT:
                    if match := directive_pat.search(line):
                        directive = match.group(1).split()
                        yield line[:match.start()]
                        match directive:
                            case ["include", filename]:
                                with open(f"templates/{filename}") as include_file:
                                    yield from parse(include_file)
                                line = line[match.end():]
                            case ["include", filename, "with"]:
                                state = State.INCLUDE_WITH
                                line = line[match.end():]
                            case _:
                                yield match.group(0)
                                line = line[match.end():]
                    else:
                        yield line
                        break


with open(sys.argv[1]) as file:
    for line in parse(file):
        print(line, end="")
