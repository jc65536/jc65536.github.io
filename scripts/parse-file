#!/usr/bin/perl

use strict;
use warnings;
# use lib "scripts";
# use SmartyPants;
use open qw( :std :encoding(UTF-8) );

my $TEMPLATE_DIR = "templates";
my $DEBUG = 0;

my $DIRECT_PAT = qr/{([^}]+)}/;
my $OPEN_PAT = qr/{(\**)/;

my $remainder = "";
my $level = -1;

# $\ = "~";

sub parse_file;
sub parse_subs;

sub get_rem {
    my $temp = $remainder;
    $remainder = "";
    $temp
}

sub set_rem {
    $remainder = shift;
}

sub trim {
    my $str = shift;
    $str =~ s/^\s+|\s+$//g;
    $str
}

sub file_iter {
    my $file = shift;
    sub { <$file> }
}

sub str_iter {
    my @lines = split /\n/, shift;
    sub { shift @lines }
}

sub dbg {
    return if !$DEBUG;
    my $func = shift;
    printf "%-11s>", $func;
    print " " x $level x 4 , @_, "\n";
}

sub put {
    my ($buf, $str) = @_;

    if (defined $buf) {
        $$buf .= $str;
    } else {
        print $str;
    }
}

sub parse_file {
    my ($iter, $subs, $dest, $exit_pat) = @_;

    while (1) {
        my $line = get_rem || &$iter // return;

        while ($line) {
            my ($exit_idx, $exit_found) = -1, 0;
            if (defined $exit_pat) {
                $exit_idx = index $line, $exit_pat;
                $exit_found = $exit_idx != -1;
            }

            my $direct_found = $line =~ $DIRECT_PAT;
            my $direct_idx = $-[0];
            my $direct_end = $+[0];

            if (!$exit_found && !$direct_found) {
                put $dest, $line;
                last;
            }

            if ($exit_found && !($direct_found && $direct_idx < $exit_idx)) {
                put $dest, substr($line, 0, $exit_idx);
                set_rem substr($line, $exit_idx + length $exit_pat);
                return;
            }

            put $dest, substr($line, 0, $direct_idx) if ($direct_idx > 0);

            my @tokens = split " ", $1;
            my $name = shift @tokens;

            if ($name eq "include") {
                my $filename = shift @tokens;
                if (defined $tokens[0] && $tokens[0] eq "with") {
                    my %incl_subs;

                    set_rem substr($line, $direct_end);
                    parse_subs $iter, $subs, \%incl_subs;
                    $line = get_rem;

                    open my $file, "<", "$TEMPLATE_DIR/$filename";
                    parse_file file_iter($file), \%incl_subs, $dest;
                    close $file;

                    next;
                } else {
                    # Include file with no processing
                    open my $file, "<", "$TEMPLATE_DIR/$filename";
                    parse_file file_iter($file), $dest;
                    close $file;
                }
            } elsif (exists $$subs{$name}) {
                put $dest, $$subs{$name};
            } else {
                put $dest, substr($line, $direct_idx, $direct_end - $direct_idx);
            }

            $line = substr $line, $direct_end;
        }
    }
}

sub parse_subs {
    my ($iter, $subs, $incl_subs) = @_;
    my $exit_pat = "{endwith}";

    while (1) {
        my $line = get_rem || &$iter // return;

        while ($line) {
            my $exit_idx = index $line, $exit_pat;
            my $exit_found = $exit_idx != -1;

            my $colon_idx = index $line, ":";
            my $colon_found = $colon_idx != -1;

            last if !$exit_found && !$colon_found;

            if ($exit_found && !($colon_found && $colon_idx < $exit_idx)) {
                set_rem substr($line, $exit_idx + length $exit_pat);
                return;
            }

            my $key = trim substr($line, 0, $colon_idx);
            my $after_colon = substr $line, $colon_idx + 1;
            $after_colon =~ s/^\s+//;

            my $open_found = $after_colon =~ /^$OPEN_PAT/;

            $$incl_subs{$key} = "";

            # No braces, so we'll just take the rest of the line
            if (!$open_found) {
                my $rest = substr($line, $colon_idx + 1);
                parse_file str_iter($rest), $subs, \$$incl_subs{$key};
                trim $$incl_subs{$key};
                last;
            }

            my $open_end = $+[0];

            # Braces mean recursion
            set_rem substr($after_colon, $open_end);
            parse_file $iter, $subs, \$$incl_subs{$key}, "$1}";
            trim $$incl_subs{$key};
            $line = get_rem;
        }
    }
}

parse_file sub { <> };
