#!/usr/bin/env python3

import re
import sys
import tempfile
from typing import Callable

include_pattern = re.compile("{include (\S+)}")
include_with_pattern = re.compile("{include (\S+) with}")
sub_pattern = re.compile("{(\**)([^=]+)=")

def print_file(path: str, func: Callable[[str], str] = lambda x: x):
    with open(path) as file:
        return map(func, file)

SCANNING_FOR_INCLUDES = 0
SCANNING_SUBS = 1
LOADING_SUB = 2

def insert_components(file):
    state = SCANNING_FOR_INCLUDES
    subs = {}

    def sub_all(line: str):
        for key, value in subs.items():
            line = line.replace(f"{{{key}}}", value.strip())
        return line

    for line in file:
        if match := include_pattern.search(line):
            with open(f"templates/{match.group(1)}") as file:
                for line in insert_components(file):
                    yield line
            continue
        if state == SCANNING_FOR_INCLUDES and (match := include_with_pattern.search(line)):
            component = match.group(1)
            state = SCANNING_SUBS
        if state == SCANNING_SUBS and "{endwith}" in line:
            with open(f"templates/{component}") as file:
                for line in file:
                    sub_lines = sub_all(line).splitlines(keepends=True)
                    for sub_line in insert_components(sub_lines):
                        yield sub_line
            subs.clear()
            state = SCANNING_FOR_INCLUDES
            continue
        if state == SCANNING_SUBS and (match := sub_pattern.search(line)):
            close_tag = match.group(1) + "}"
            key = match.group(2)
            subs[key] = ""
            line = line[match.end():]
            state = LOADING_SUB
        if state == LOADING_SUB:
            if (close_index := line.find(close_tag)) != -1:
                line = line[:close_index]
                state = SCANNING_SUBS
            subs[key] += line.strip() + "\n"
        if state == SCANNING_FOR_INCLUDES:
            yield line

for line in insert_components(sys.stdin):
    sys.stdout.write(line)
